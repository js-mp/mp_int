Язык программирования MP

Язык программирования MP предназначен для описания алгоритмов манипуляции битами, с целью построения соответствующих
этим алгоритмам логических выражений (реализовано в отдельной библиотеке).

Ограничения языка, вытекающие из его предназначения:
1. Рекурсия запрещена.
2. Нет циклов с условиями; каждый цикл выполняется указанное количество раз.

Для структурирования программ предназначен оператор `#include <filename>` (не может использоваться в теле функций).

Для указания интерпретатору, какие функции являются элементарными, предназначены описания функция `native`.

Допустимые native-функции:
```
func and:2:1 #1d+1d:1d native
func or:2:1 #1d+1d:1d native
func xor:2:1 #1d+1d:1d native

func im:2:1 #1d+1d:1d native
```

Здесь `im` - это операция импликации: `im(a,b) = (not a) or b`. Её одной достаточно, чтобы определить
все другие битовые операции.

Пример определения функции:
```
func sum:16:8 #8d+8d:8d {
  ...
}
```

Здесь `sum:16:8` - это имя функции. Двоеточиями отделены число бит на входе и на выходе (в данном примере
функция принимает 16 бит и возвращает 8; вход берётся из стека, выход помещается в стек). После решетки `#`
идёт необязательное описание формата представления параметров и результата функции в программе mp_run.py;
знак плюс означает соединение нескольких параметров в один.

Типы форматов:
d - десятичное представление
h - шестнадцатиричное представление
b - двоичное представление
Допускаются только неотрицательные целые числа.

Можно определить несколько функций с одним собственным именем (до первого двоеточия), но разными размерами входных
и/или выходных параметров.

В теле функции можно использовать следующие операторы и синтаксические конструкции:
- описание локальных переменных: `def{ arg1:8 arg2:8 x:1 ret:8 }`; указывается имя переменной и её размер в битах;
  в отличии от функций, нельзя определить несколько переменных с одним собственным именем и разными размерами
- перемещение бит из стека в переменную: `>arg1:8`; глубина стека при этом уменьшается
- помещение бит из переменной в стек: `x:1>`; значение переменной при этом не меняется
- копирование бит из стека в переменную: `>arg1:8>`; глубина стека не меняется
- помещение в стек константы: `0:1>` - в стек добавляется один нулевой бит; константа может быть задана
  в десятичном `27`, шестнадцатиричном `1B#h` или двоичном `11011#b` виде
- удаление из стека заданного числа бит: `>_:8`
- вызов функции: `>sum:16:8>` - вызывается функция `sum:16:8`, ей в стеке передаётся 16 бит, и принимается 8;
  вызываемая функция должна быть описана до вызова
- контроль нулевой глубины стека (в рамках данной функции): `.` (точка); влияет на компиляцию, но не выполнение;
  можно использовать для самопроверки
- комментарии: `// ...`
- цикл: `loop 8 { ... }` - тело цикла выполняется заданное число раз (в данном случае 8)
- условное выполнение: `if { ... } else { ... }`; со стека извлекается один бит, и если это 1, то выполняется
  первый блок, если 0, то второй; блок `else` является необязательным; если он указан, то изменение глубины стека
  в обоих блоках должно быть одинаковым

  Примеры выполнения функций:

  ```
  ./mp_run.py mp_prog/example_sum.mp sum:16:8 15 7
  ```

  ```
  ./mp_run.py mp_prog/example_sha256.mp sha256:32:256 97 98 99 100
  ```
